#!/Library/Frameworks/Python.framework/Versions/3.6/bin/python3

from __future__ import print_function
from apiclient.discovery import build
from google.oauth2 import service_account
from httplib2 import Http
from oauth2client import file, client, tools
import boto3
from boto3.dynamodb.conditions import Key, Attr
import json
import yaml
import requests
import time
import collections
from optparse import OptionParser

def log_error(msg):
  print(msg)

def getPayPalToken(infile,environment):
  with open(infile, 'r') as stream:
    try:
      y = yaml.load(stream)
    except yaml.YAMLError as e:
      log_error(e)
      exit(1)

  if environment == "sandbox":
    url = "https://api.sandbox.paypal.com/v1/oauth2/token"
  elif environment == "production":
    url = "https://api.paypal.com/v1/oauth2/token"

  headers = { 'Accept': 'application/json',
              'Accept-Language': 'en_US'}

  data = "grant_type=client_credentials"

  r = requests.post(url,auth=(y["environment"][environment]['client_id'],y["environment"][environment]['client_secret']),headers=headers,data=data)

  body = r.json()

  return body['access_token']

def listInvoices(environment,paypal):
  page = 0
  page_size = 100
  # Set headers for content and authorization
  headers = { 'Content-Type': 'application/json',
              'Authorization': 'Bearer '+paypal}

  # Get paypal url based on environment
  if environment == "sandbox":
    url = "https://api.sandbox.paypal.com/v1/invoicing/search/"
  elif environment == "production":
    url = "https://api.paypal.com/v1/invoicing/search/"

  data = { "status": ["SENT", "PAID", "CANCELLED"],
           "invoice_date": "2018-07-01 PDT",
           "page": page,
           "page_size": page_size }

  r = requests.post(url,headers=headers,data=json.dumps(data))

  if r.status_code == 200:
    body = r.json()

    count = 0
    for invoice in body['invoices']:
      #print(invoice)
      print(str(count)+" ID = "+invoice['id']+" Number = "+invoice['number']+" email = "+invoice['billing_info'][0]['email']+" status = "+invoice['status']+" Invoice date = "+invoice['invoice_date'])
      count = count + 1

    return body['invoices']
  else:
    return 'false'

# Begin main program
parser = OptionParser()
parser.add_option("-e","--environment", dest="environment", help="Paypal Environment -- OPTIONAL defaults to sandbox [ sandbox, production ]")
parser.add_option("-f","--file",dest="credfile", help="Paypal Credential file (YAML) -- OPTIONAL defaults to paypal.yaml")
parser.add_option("-v","--verbose",dest="verbose", help="Verbose")

(options,args) = parser.parse_args()

if options.environment:
  environment = options.environment
else:
  environment = "sandbox"

if options.credfile:
  credfile = options.credfile
else:
  credfile = "paypal.yaml"

if options.verbose:
  verbose=True
else:
  verbose=False

# Clear the google sheet
paypal = getPayPalToken(credfile,environment)

listInvoices(environment,paypal)

